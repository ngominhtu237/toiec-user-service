require('./helper');

var Item = require('./model');
var app = require('./app');
var assert = require('assert');
var request = require('supertest');

describe('Limiting fields', function () {
  beforeEach(function (done) {
    Item
      .create({name: 'Item 1', description: 'My text'})
      .then(function () {
        done();
      });
  });

  describe('with fields=name parameter', function () {
    it('returns name', function (done) {
      request(app)
        .get('/?fields=name')
        .expect(function (res) {
          assert.notEqual(undefined, res.body[0].name);
        })
        .end(done);
    });

    it('does not return description', function (done) {
      request(app)
        .get('/?fields=name')
        .expect(function (res) {
          assert.equal(undefined, res.body[0].description);
        })
        .end(done);
    });
  });

  describe('with fields=name,description parameter', function () {
    it('returns name', function (done) {
      request(app)
        .get('/?fields=name,description')
        .expect(function (res) {
          assert.notEqual(undefined, res.body[0].name);
        })
        .end(done);
    });

    it('returns description', function (done) {
      request(app)
        .get('/?fields=name,description')
        .expect(function (res) {
          assert.notEqual(undefined, res.body[0].description);
        })
        .end(done);
    });
  });

  describe('without fields parameter', function () {
    it('returns name', function (done) {
      request(app)
        .get('/')
        .expect(function (res) {
          assert.notEqual(undefined, res.body[0].name);
        })
        .end(done);
    });

    it('returns description', function (done) {
      request(app)
        .get('/')
        .expect(function (res) {
          assert.notEqual(undefined, res.body[0].description);
        })
        .end(done);
    });
  });
});
